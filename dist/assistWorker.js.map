{"version":3,"file":"assistWorker.js","sources":["../src/index.ts"],"sourcesContent":["const WORKER_MESSAGE = 'WORKER_MESSAGE';\nconst JOB_RESULT = 'JOB_RESULT';\n\n/**\n * worker线程内部操作方法\n */\nexport type WorkerMethods = {\n  postMessage?: Worker['postMessage'];\n  close?: () => void;\n}\n\n/**\n * Web Workers辅助者，提供极少API使你能更灵活地在编码中使用Web Workers\n */\ntype AssistWorker = {\n  /**\n   * 收集worker线程内需要用到的主线程数据，数据的字段名需和线程中用到的名称保持一致\n   * @param {object} sourceData worker线程内用到的主线程数据\n   * @returns {object} Web Workers API封装对象\n   */\n  collect: (data: Record<string, any>) => AssistWorker;\n  /**\n   * 接收并处理worker线程向主线程发送的信息\n   * @param {function(message):void} callback worker线程向主线程发送信息的监听回调\n   * @returns {object} Web Workers API封装对象\n   */\n  onMessage: (handler: (message: any) => void) => AssistWorker;\n  /**\n   * 创建和初始化worker线程\n   * @param {function(...dynamicParameters, workerMethods):any} job 需要放入worker线程执行的工作流程函数\n   * @returns {object} 用于控制工作流程执行和线程关闭的对象\n   */\n  create: <T extends (...args: any) => any>(\n    job: T\n  ) => {\n    run: (\n      ...args: Parameters<T> extends [...infer P, infer Q] ? Q extends WorkerMethods ? P : Parameters<T> : never\n    ) => Promise<ReturnType<T>>;\n    terminate: () => void;\n  };\n};\n\n/**\n * 判断值是否是可转移的对象，在使用中可以使用快速且高效的零拷贝操作\n * @param {any} value 待判断的值\n * @returns {boolean} 是否是可转移的对象\n */\nconst isTransferables = (value: any) =>\n  value instanceof ArrayBuffer ||\n  value instanceof MessagePort ||\n  (self.ImageBitmap && value instanceof ImageBitmap);\n\n/**\n * 创建一个Web Workers API封装对象\n * @returns {object} Web Workers API封装对象\n */\nexport const createAssistWorker = () => {\n  // 记录所有的工作流程的执行凭证\n  const jobs: {\n    done: (error?: Error, result?: any) => void;\n  }[] = [];\n\n  // 收集所有worker线程需要用到的主线程数据\n  let collections: Map<string, any> = new Map();\n  // 记录主线程设置的信息接收器\n  let onMessage: ((message: any) => any) | undefined;\n  // Web Workers API封装对象\n  const assistWorker: AssistWorker = {\n    collect: (data: Record<string, any>) => {\n      for (let key in data) {\n        collections.set(key, data[key]);\n      }\n      return assistWorker;\n    },\n    onMessage: (handler: (message: any) => void) => {\n      onMessage = handler;\n      return assistWorker;\n    },\n    create: <T extends (...args: any) => any>(job: T) => {\n      // 核心工作流程脚本\n      const majorScript = job.toString();\n\n      // 组合成worker脚本\n      const workerScript = `\n        // 将收集到的变量声明和定义加入脚本字符串，后面函数执行的时候便不会出现not defined的错误了\n        $collections = {};\n        ${Object.entries(Object.fromEntries(collections)).reduce(\n          (variablesStr, [key, value]) => {\n            const variable = `$collections['${key}']=` + (\n              typeof value === 'function'\n                ? `${value};`\n                : `JSON.parse(\\`${JSON.stringify(value)}\\`);`\n            );\n            return variablesStr + variable;\n          },\n          ''\n        )}\n  \n        // 声明定义用于判断是否是可转移对象的函数\n        $isTransferables = ${isTransferables}\n  \n        // 在脚本中声明并定义一个包含工作流程的函数体\n        $job=${majorScript};\n  \n        // 给worker线程添加消息监听，等待主线程的发号施令\n        onmessage=e=>{\n          const { index, args } = e.data;\n  \n          Promise.resolve(\n            $job.apply($job, args.concat([{\n              collections: $collections,\n              postMessage: (message) => postMessage({ type: '${WORKER_MESSAGE}', message }),\n              close: self.close,\n            }]))\n          ).then(result => {\n            postMessage({ type: '${JOB_RESULT}', message: { index, result } }, [result].filter($isTransferables))\n          }).catch(error => {\n            postMessage({ type: '${JOB_RESULT}', message: { index, error } })\n          })\n        }\n      `;\n\n      // 主线程下创建worker线程\n      const workerURL = URL.createObjectURL(\n        new Blob([workerScript], { type: 'text/javascript' })\n      );\n      const worker = new Worker(workerURL);\n\n      // 监听接收worker线程发的消息\n      worker.onmessage = function (e) {\n        const data = e.data as {\n          type: string;\n          message: any;\n        };\n\n        if (data.type === WORKER_MESSAGE)\n          if (onMessage) onMessage.call(onMessage, data.message);\n\n        if (data.type === JOB_RESULT) {\n          const { index, result, error } = data.message;\n          const { done } = jobs[index];\n          done(error, result);\n        }\n      };\n\n      /**\n       * 执行工作流程\n       * @param {...any} args 动态参数\n       * @returns {Promise<any>} 工作流程执行结果\n       */\n      const run = (...args) => {\n        return new Promise<ReturnType<T>>((resolve, reject) => {\n          const index = jobs.length;\n          jobs.push({\n            done: (error, result) => {\n              if (error) reject(error);\n              else resolve(result);\n            },\n          });\n          worker.postMessage(\n            { index, args },\n            (args as any[]).filter(isTransferables)\n          );\n        });\n      };\n\n      /**\n       * 终止worker线程\n       */\n      const terminate = () => {\n        worker.terminate();\n        URL.revokeObjectURL(workerURL);\n\n        jobs.length = 0;\n        collections.clear();\n        onMessage = undefined;\n      };\n\n      return { run, terminate };\n    },\n  };\n\n  return assistWorker;\n};\n"],"names":["WORKER_MESSAGE","JOB_RESULT","isTransferables","value","ArrayBuffer","MessagePort","self","ImageBitmap","jobs","onMessage","collections","Map","assistWorker","collect","data","key","set","handler","create","job","majorScript","toString","workerScript","Object","entries","fromEntries","reduce","variablesStr","JSON","stringify","workerURL","URL","createObjectURL","Blob","type","worker","Worker","onmessage","e","call","message","index","result","error","done","run","args","Promise","resolve","reject","length","push","postMessage","filter","terminate","revokeObjectURL","clear","undefined"],"mappings":"oPAAA,MAAMA,EAAiB,iBACjBC,EAAa,aA8CbC,EAAmBC,GACvBA,aAAiBC,aACjBD,aAAiBE,aAChBC,KAAKC,aAAeJ,aAAiBI,iCAMN,KAEhC,MAAMC,EAEA,GAGN,IAEIC,EAFAC,EAAgC,IAAIC,IAIxC,MAAMC,EAA6B,CACjCC,QAAUC,IACR,IAAK,IAAIC,KAAOD,EACdJ,EAAYM,IAAID,EAAKD,EAAKC,IAE5B,OAAOH,CAAY,EAErBH,UAAYQ,IACVR,EAAYQ,EACLL,GAETM,OAA0CC,IAExC,MAAMC,EAAcD,EAAIE,WAGlBC,EAAe,uGAGjBC,OAAOC,QAAQD,OAAOE,YAAYf,IAAcgB,QAChD,CAACC,GAAeZ,EAAKZ,KAMZwB,GALU,iBAAiBZ,QACf,mBAAVZ,EACH,GAAGA,KACH,gBAAgByB,KAAKC,UAAU1B,YAIvC,uEAImBD,yDAGdkB,ySASgDpB,uIAI5BC,yIAEAA,oEAMvB6B,EAAYC,IAAIC,gBACpB,IAAIC,KAAK,CAACX,GAAe,CAAEY,KAAM,qBAE7BC,EAAS,IAAIC,OAAON,GAG1BK,EAAOE,UAAY,SAAUC,GAC3B,MAAMxB,EAAOwB,EAAExB,KAQf,GAHIA,EAAKoB,OAASlC,GACZS,GAAWA,EAAU8B,KAAK9B,EAAWK,EAAK0B,SAE5C1B,EAAKoB,OAASjC,EAAY,CAC5B,MAAMwC,MAAEA,EAAKC,OAAEA,EAAMC,MAAEA,GAAU7B,EAAK0B,SAChCI,KAAEA,GAASpC,EAAKiC,GACtBG,EAAKD,EAAOD,EACb,CACH,EAmCA,MAAO,CAAEG,IA5BG,IAAIC,IACP,IAAIC,SAAuB,CAACC,EAASC,KAC1C,MAAMR,EAAQjC,EAAK0C,OACnB1C,EAAK2C,KAAK,CACRP,KAAM,CAACD,EAAOD,KACRC,EAAOM,EAAON,GACbK,EAAQN,EAAO,IAGxBP,EAAOiB,YACL,CAAEX,QAAOK,QACRA,EAAeO,OAAOnD,GACxB,IAgBSoD,UATI,KAChBnB,EAAOmB,YACPvB,IAAIwB,gBAAgBzB,GAEpBtB,EAAK0C,OAAS,EACdxC,EAAY8C,QACZ/C,OAAYgD,CAAS,EAGE,GAI7B,OAAO7C,CAAY"}