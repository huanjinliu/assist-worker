!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n((e="undefined"!=typeof globalThis?globalThis:e||self).assistWorker={})}(this,(function(e){"use strict";const n="WORKER_MESSAGE",s="JOB_RESULT",t=e=>e instanceof ArrayBuffer||e instanceof MessagePort||self.ImageBitmap&&e instanceof ImageBitmap;e.createAssistWorker=()=>{const e=[];let o,r=new Map;const a={collect:e=>{for(let n in e)r.set(n,e[n]);return a},onMessage:e=>(o=e,a),create:a=>{const i=a.toString(),c=`\n        // 将收集到的变量声明和定义加入脚本字符串，后面函数执行的时候便不会出现not defined的错误了\n        $collections = {};\n        ${Object.entries(Object.fromEntries(r)).reduce(((e,[n,s])=>e+(`$collections['${n}']=`+("function"==typeof s?`${s};`:`JSON.parse(\`${JSON.stringify(s)}\`);`))),"")}\n  \n        // 声明定义用于判断是否是可转移对象的函数\n        $isTransferables = ${t}\n  \n        // 在脚本中声明并定义一个包含工作流程的函数体\n        $job=${i};\n  \n        // 给worker线程添加消息监听，等待主线程的发号施令\n        onmessage=e=>{\n          const { index, args } = e.data;\n  \n          Promise.resolve(\n            $job.apply($job, args.concat([{\n              collections: $collections,\n              postMessage: (message) => postMessage({ type: '${n}', message }),\n              close: self.close,\n            }]))\n          ).then(result => {\n            postMessage({ type: '${s}', message: { index, result } }, [result].filter($isTransferables))\n          }).catch(error => {\n            postMessage({ type: '${s}', message: { index, error } })\n          })\n        }\n      `,l=URL.createObjectURL(new Blob([c],{type:"text/javascript"})),f=new Worker(l);f.onmessage=function(t){const r=t.data;if(r.type===n&&o&&o.call(o,r.message),r.type===s){const{index:n,result:s,error:t}=r.message,{done:o}=e[n];o(t,s)}};return{run:(...n)=>new Promise(((s,o)=>{const r=e.length;e.push({done:(e,n)=>{e?o(e):s(n)}}),f.postMessage({index:r,args:n},n.filter(t))})),terminate:()=>{f.terminate(),URL.revokeObjectURL(l),e.length=0,r.clear(),o=void 0}}}};return a}}));
//# sourceMappingURL=assistWorker.js.map
